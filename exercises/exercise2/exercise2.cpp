
#include <iostream>
#include <thread>
#include <vector>
#include <chrono>
#include <random>
#include <string>
#include <sstream>

namespace {

    bool stop = false;

    struct StorageBox {

        void put(const std::string& value) {

        }

        std::string get() {

            return "";
        }

    private:
        std::string value_;
    };

    void consumer(StorageBox *storage) {
        while (!stop) {
            auto value = storage->get();
            std::cout << "Consumer read value: " << value;
        }
    }

    void producer(StorageBox *storage, std::default_random_engine *generator, int id) {

        std::uniform_int_distribution<int> distribution(0,100);

        while (!stop) {

            std::stringstream ss;
            ss << "Random number generated by producer '" << id << "': " << distribution(*generator) << std::endl;

            storage->put(ss.str());

            std::this_thread::sleep_for(std::chrono::milliseconds(distribution(*generator) * 10));
        }
    }
}// namespace


int main() {

    StorageBox storage{};
    std::default_random_engine generator;

    const int numProducers = 3;
    std::vector<std::thread> producerThreads(numProducers);
    for (int i = 1; i <= numProducers; i++) {
        producerThreads.emplace_back(std::thread(&producer, &storage, &generator, i));
    }

    std::thread consumerThread(&consumer, &storage);

    std::cout << "Press any key to exit.." << std::endl;
    std::cin.get();

    stop = true;

    consumerThread.join();

    for (auto &t : producerThreads) {
        if (t.joinable()) t.join();
    }

    return 0;
}